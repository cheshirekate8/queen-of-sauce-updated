// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  fridges       Fridge[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Fridge {
  id                String             @id @default(cuid())
  name              String             @unique
  owner             User?              @relation(fields: [ownerId], references: [id])
  ownerId           String?
  FridgeIngredients FridgeIngredient[]
}

model Recipe {
  id                String             @id @default(cuid())
  name              String             @unique
  imgUrl            String
  desc              String
  RecipeIngredients RecipeIngredient[]
}

enum IngredientType {
  CROPS
  FORAGED_GOODS
  TREE_FRUIT
  ANIMAL_PRODUCTS
  ARTISIAN_GOODS
  MISCELLANEOUS
  FISHING
  CRAB_POT_ITEMS
  GENERAL_STORE_ITEMS
  INGREDIENT_DISHES
}

model Ingredient {
  id               String             @id @default(cuid())
  name             String             @unique
  imgUrl           String
  desc             String
  type             IngredientType
  alsoRecipe       Boolean            @default(false)
  FridgeIngredient FridgeIngredient[]
  RecipeIngredient RecipeIngredient[]
}

model FridgeIngredient {
  id           String      @id @default(cuid())
  fridge       Fridge?     @relation(fields: [fridgeId], references: [id])
  fridgeId     String?
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  ingredientId String?
  quantity     Int
}

model RecipeIngredient {
  id           String      @id @default(cuid())
  recipe       Recipe?     @relation(fields: [recipeId], references: [id])
  recipeId     String?
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  ingredientId String?
  quantity     Int
}
